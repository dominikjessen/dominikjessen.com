---

---

<header class="fixed z-50 w-full">
  <nav id="nav" class="mx-auto px-4 md:px-6 py-2 rounded-full w-11/12 sm:w-4/6 xl:w-2/5 justify-between mt-4">
    <ul
      class="flex gap-2 py-1 md:py-2 md:gap-3 lg:gap-5 xl:gap-6 justify-between items-center text-primary dark:text-foreground text-base md:text-lg font-signika"
    >
      <li>
        <a href="/" data-ref="intro" class="px-5 md:px-6 py-2 md:py-3 rounded-full cursor-pointer hover:bg-foreground/5" aria-label="Home">üëãüèª</a>
      </li>
      <li>
        <a href="/#projects" data-ref="projects" class="px-4 md:px-6 py-2 md:py-3 rounded-full hover:bg-foreground/5">Projects</a>
      </li>
      <li>
        <a href="/#currently" data-ref="currently" class="px-4 md:px-6 py-2 md:py-3 rounded-full hover:bg-foreground/5">About</a>
      </li>
      <li>
        <a
          id="cv-nav"
          href="/2023_CV_DominikJessen.pdf"
          data-ref="cv"
          target="_blank"
          class="px-4 md:px-6 py-2 md:py-3 rounded-full hover:bg-foreground/5">CV</a
        >
      </li>
    </ul>
  </nav>
</header>

<style>
  .navitem-active {
    background-color: hsl(var(--foreground) / 0.05);
  }

  .nav-scrolled {
    --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);

    background-color: hsl(var(--header-background));
    border-width: 1px;
    border-color: hsl(var(--foreground) / 0.1);
    box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
  }
</style>

<script>
  const nav = document.getElementById('nav');
  const navRect = nav?.getBoundingClientRect();

  /////////////////////
  // Active nav link //
  /////////////////////
  const sections = [...document.getElementsByTagName('section')];
  const footer = document.getElementById('footer');
  if (footer) {
    sections.push(footer);
  }

  function highlightSection(entry: IntersectionObserverEntry) {
    const id = entry.target.id;
    const currentlyActive = document.querySelector('.navitem-active');
    const shouldBeActive = document.querySelector(`nav li a[data-ref="${id}"]`);

    if (currentlyActive && shouldBeActive) {
      currentlyActive.classList.remove('navitem-active');
    }
    if (shouldBeActive) {
      shouldBeActive.classList.add('navitem-active');
    }
  }

  const highlightCallback: IntersectionObserverCallback = (entries, _observer) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        highlightSection(entry);
      }
    });
  };
  const highlightIO = new IntersectionObserver(highlightCallback, { threshold: 0.25 });
  sections.forEach((section) => highlightIO.observe(section));

  //////////////////
  // Nav scrolled //
  //////////////////
  // TODO: This doesn't react to resizing, but do I want to add a resizeChange here?
  const canvasVisible = window.matchMedia('(min-width: 1024px)');
  const scrollTargets = canvasVisible.matches
    ? [...document.querySelectorAll('.intersect-target')]
    : [...document.querySelectorAll('.intersect-target:not(#revealCanvasWrapper)')];

  if (nav && navRect && scrollTargets.length) {
    const intersectRatios = new Map<string, number>(); // To remove nav scroll styling when all elements no longer intersect

    const scrollCallback: IntersectionObserverCallback = (entries, _observer) => {
      entries.forEach((entry) => {
        intersectRatios.set(entry.target.nodeName, entry.intersectionRatio); // This only works because my nodeNames are unique

        const itemsOverlapping = entry.target.getBoundingClientRect().y <= navRect.bottom;
        if (itemsOverlapping) {
          nav.classList.add('nav-scrolled');
        }
      });

      let intersectSum = 0;
      intersectRatios.forEach((value) => {
        intersectSum += value;
      });

      // All elements below header
      if (intersectSum === scrollTargets.length) {
        nav.classList.remove('nav-scrolled');
      }
    };

    const scrollIO = new IntersectionObserver(scrollCallback, {
      rootMargin: `-${navRect.bottom}px 0px 0px 0px`, // Header width for correct intersectionRatio
      threshold: 1
    });
    scrollTargets.forEach((target) => scrollIO.observe(target));
  }

  //////////////////////
  // Nav click scroll //
  //////////////////////

  function onNavLinkClicked(e: Event, link: Element) {
    e.preventDefault();
    const targetId = link.getAttribute('data-ref') ?? '';
    const scrollTarget = document.getElementById(targetId);

    if (!scrollTarget || !nav) return;

    if (targetId === 'intro') {
      window.scrollTo({ top: 0, behavior: 'smooth' });
      return;
    }

    const offset =
      scrollTarget.getBoundingClientRect().top + window.scrollY - (nav.getBoundingClientRect().height + 2 * nav.getBoundingClientRect().top);
    window.scrollTo({ top: offset, behavior: 'smooth' }); // will scroll to 4th h3 element
  }

  const navLinks = document.querySelectorAll('#nav a:not(#cv-nav)');
  navLinks.forEach((link) => {
    link.addEventListener('click', (e) => {
      onNavLinkClicked(e, link);
    });
  });
</script>
