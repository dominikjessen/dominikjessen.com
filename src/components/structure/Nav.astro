---

---

<header class="fixed z-50 w-full">
  <nav id="nav" class="nav-scrolled mx-auto px-4 md:px-6 py-2 rounded-full text-foreground w-11/12 sm:w-4/6 xl:w-2/5 justify-between mt-4">
    <ul class="flex gap-2 py-1 md:py-2 md:gap-3 lg:gap-5 xl:gap-6 justify-between items-center text-primary text-base md:text-lg font-signika">
      <li>
        <a href="/" data-ref="intro" class="px-5 md:px-6 py-2 md:py-3 rounded-full cursor-pointer hover:bg-primary/10">👋🏻</a>
      </li>
      <li>
        <a href="/#projects" data-ref="projects" class="px-4 md:px-6 py-2 md:py-3 rounded-full hover:bg-primary/10">Projects</a>
      </li>
      <li>
        <a href="/#currently" data-ref="currently" class="px-4 md:px-6 py-2 md:py-3 rounded-full hover:bg-primary/10">Currently</a>
      </li>
    </ul>
  </nav>
</header>

<script>
  const nav = document.getElementById('nav');
  const navRect = nav?.getBoundingClientRect();

  /////////////////////
  // Active nav link //
  /////////////////////
  const sections = [...document.getElementsByTagName('section')];

  function highlightSection(entry: IntersectionObserverEntry) {
    const id = entry.target.id;
    const currentlyActive = document.querySelector('.navitem-active');
    const shouldBeActive = document.querySelector(`nav li a[data-ref="${id}"]`);

    if (currentlyActive && shouldBeActive) {
      currentlyActive.classList.remove('navitem-active');
    }
    if (shouldBeActive) {
      shouldBeActive.classList.add('navitem-active');
    }
  }

  const highlightCallback: IntersectionObserverCallback = (entries, _observer) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        highlightSection(entry);
      }
    });
  };
  const highlightIO = new IntersectionObserver(highlightCallback, { threshold: 0.25 });
  sections.forEach((section) => highlightIO.observe(section));

  //////////////////
  // Nav scrolled //
  //////////////////
  const scrollTargets = [...document.getElementsByClassName('intersect-target')];
  if (nav && navRect && scrollTargets.length) {
    const scrollCallback: IntersectionObserverCallback = (entries, _observer) => {
      entries.forEach((entry) => {
        // console.log('target y:', entry.target.getBoundingClientRect().y);
        // console.log('target b:', entry.target.getBoundingClientRect().bottom);
        // console.log('nav y:', navRect.y);
        // console.log('nav b:', navRect.bottom);

        // TODO: Figure out correct stuff here
        const itemsOverlapping = entry.target.getBoundingClientRect().y <= navRect.bottom;
        if (itemsOverlapping) {
          console.log('overlapping');
        }
      });
    };

    const scrollIO = new IntersectionObserver(scrollCallback, {
      threshold: 1
    });
    scrollTargets.forEach((target) => scrollIO.observe(target));
  }
</script>
